#+TITLE:  V'emacs configuration
#+AUTHOR: Victor Fernandes
#+EMAIL:  me@ghikio.dev

* PERSONALIZATION
** Helpers
#+BEGIN_SRC emacs-lisp
  (defun my-emacsd-git-branch ()
    "Return .emacs.d current git branch name"
    (substring (shell-command-to-string
                (concat "(cd " user-emacs-directory
                        " && git branch | grep \\* | cut -d' ' -f2)"))
               0 -1))

  (defun my-emacsd-git-commit-hash ()
    "Return the .emacs.d current commit hash"
    (substring (shell-command-to-string
                (concat "(cd " user-emacs-directory
                        " && git branch | grep \\* | cut -d' ' -f2)"))
               0 -1))

  (defun my-custom-documents-dir (&rest dirs)
    "Return requested nested directories inside the documents directory"
    (reduce 'concat (cons "~/Documents/" dirs)))

  (defun my-custom-notes-dir ()
    "Return the notes directory"
    (my-custom-documents-dir "notes/"))

  (defun my-custom-notes-dump-dir ()
    "Return the dump directory"
    (my-custom-documents-dir "notes/" "dump/"))

  (defun my-get-timestamp-filename (prefix)
    "Builds a org filename with the prefix and current name"
    (concat prefix "-" (format-time-string "%Y%m%d") ".org"))

  (defun my-get-dump-filename ()
    "Return a dump timestamped filename"
    (my-get-timestamp-filename "dump"))
#+END_SRC
** Open dump file
#+BEGIN_SRC emacs-lisp
  (defun my-open-dump-file ()
    "Open a dump file"
    (interactive)
    (when (not (file-directory-p (my-custom-notes-dump-dir)))
      (make-directory (my-custom-notes-dump-dir)))

    (find-file (concat (my-custom-notes-dump-dir)
                       (my-get-dump-filename))))
#+END_SRC
** Custom initial setup
#+BEGIN_SRC emacs-lisp
  (defun my-startup-display ()
    "Open the TODO file & calendar"
    (find-file "~/Documents/prs/todo/todo.org")
    (org-agenda-list))
#+END_SRC
** Hydra Menus
*** Ggtags
    Organize keybinds by groups.
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-c-tags-menu (:color pink
                               :hint  nil)
    "
  ^Files^            ^Find^
  ---------------------------------------
  _c_: create        _d_: definition
  _u_: update        _r_: reference
  _s_: switch .c/.h  _o_: other symbols
  ^ ^                _f_: file
  ^ ^                ^ ^
  "
    ("c" ggtags-create-tags)
    ("u" ggtags-update-tags)
    ("s" ff-find-other-file)
    ("d" ggtags-find-definition)
    ("r" ggtags-find-reference)
    ("o" ggtags-find-other-symbol)
    ("f" ggtags-find-file)
    ("C" nil "cancel")
    ("Q" quit-window "quit" :color blue))
#+END_SRC
* CONFIGURATION
** Initial configuration
*** Aesthetics
**** Disable tutorial
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
**** Initial messages
     Define both the scrach initial message and the minibuffer initial message.
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message
	(concat
  ";;  _________               ________
  ;;  \\++++++++\\             /+++++++/
  ;;   \\++++++++\\           /+++++++/
  ;;    \\++++++++\\         /+++++++/
  ;;     \\++++++++\\       /+++++++/
  ;;      \\++++++++\\     /+++++++/
  ;;       \\++++++++\\    \\++++++/
  ;;        \\++++++++\\    \\++++/
  ;;         \\++++++++\\    \\++/
  ;;          \\++++++++\\    \\/
  ;;           \\++++++++\\
  ;;            \\++++++++\\
  ;;             \\+++++++/  __
  ;;              \\+++++/  /++\\
  ;;               \\+++/  /++++\\    Rev. " (my-emacsd-git-branch) ":" (my-emacsd-git-commit-hash) ",
  ;;                \\+/  /++++++\\   Welcome back.
  ;;                 '   --------
  "))

  ;; For some reason, scrach mode is detected when I set
  ;; linum-mode to prog-mode-hook, so I manually disable
  ;; it here.
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (linum-relative-mode 0)))

  (defun display-startup-echo-area-message ()
    (message "Nani?"))
#+END_SRC
**** Font
#+BEGIN_SRC emacs-lisp
  (when (find-font (font-spec :name "Fira Code Retina"))
    (set-frame-font "Fira Code Retina 13" nil t))
#+END_SRC
**** GUI
     Hide things.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (fringe-mode 0)
#+END_SRC

     Display time in bar.
#+BEGIN_SRC emacs-lisp
  (display-time-mode)
  (setq display-time-default-load-average nil)
#+END_SRC

     Pretiffy symbols
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
#+END_SRC

     Disable help pop-up.
#+BEGIN_SRC emacs-lisp
  (setq tooltip-use-echo-area t)
#+END_SRC
**** Theme
     Add a custom directory for themes and activate the seti theme.

     note: Theme is set in a hook since the package must load first.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
            (lambda () (load-theme 'sanityinc-tomorrow-night)))
  (add-to-list 'custom-theme-load-path
               (concat user-emacs-directory "/themes/"))
#+END_SRC
*** Behavior
**** Remap yes/no menus to y/n
#+BEGIN_SRC emacs-lisp
  (defalias #'yes-or-no-p #'y-or-n-p)
#+END_SRC
**** Progressive scroll
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
**** Kill the f*#@! ring bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function #'ignore)
#+END_SRC
**** Disable backups and autosave
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
**** Set C default style
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux")
#+END_SRC
**** Windows
     Set windmove to wrap in borders
#+BEGIN_SRC emacs-lisp
  (setq windmove-wrap-around t)
#+END_SRC
**** GPG
     Set gpg password to be asked on the minibuffer.
#+BEGIN_SRC emacs-lisp
  (setq epa-pinentry-mode 'loopback)
#+END_SRC
**** Startup menu
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook #'my-startup-display)
#+END_SRC
**** ORG
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-include-diary t)
  (setq org-agenda-files (list "~/Documents/prs/todo"))
  (setq org-agenda-diary-file  "~/Documents/diary.org")
  (setq org-log-repeat "time")
#+END_SRC
**** TEX
#+BEGIN_SRC emacs-lisp
  (setq TeX-engine "xetec")
#+END_SRC
** Packages configuration
*** General
**** Magit
     GIT wrapper.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
     _references:_
     [[*Magit][Key bindings]]
     [[*Evil-mode][Set evil-leader to work with magit]]
**** Which-key
     Autocompletion menu for commands.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode t)
    :config
    (which-key-add-key-based-replacements
      ", S"   "external shell"
      ", c"   "configuration"
      ", ce"  "edit"
      ", cr"  "reload"
      ", p"   "project"
      ", pc"  "compile"
      ", ps"  "switch projects"
      ", g"   "git"
      ", b"   "buffer"
      ", bs"  "switch"
      ", gs"  "status"
      ", d"   "open dump note"
      ", q"   "kill buffer"
      ", z"   "zoom")

    (which-key-add-major-mode-key-based-replacements 'org-mode
      ", o"   "org-mode"
      ", ol"  "links"
      ", ols" "store"
      ", oli" "insert")

    (which-key-add-major-mode-key-based-replacements 'c-mode
      ", t"   "tags"))
#+END_SRC
**** Tomatinho
     Pomodoro timer.
#+BEGIN_SRC emacs-lisp
  (use-package tomatinho
    :ensure t)
#+END_SRC
     _references:_
     [[*Tomatinho][Key bindings]]
**** Ggtags
     Emacs frontend to GNU Global source code tagging system.
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t
    :config (add-hook 'c-mode-common-hook
		      (lambda ()
			(when (derived-mode-p 'c-mode 'c++-mode 'asm-mode)
			  (ggtags-mode 1)))))
#+END_SRC
     _references:_
     [[*Ggtags][Key bindings]]
**** Projectile
     Project Interaction Library for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    ;; projectile-mode is not enable here since we enable
    ;; in the counsel-projectile package configuration.
    (when (file-exists-p "~/.projects/")
      (setq projectile-project-search-path '("~/.projects/"))))
#+END_SRC
     _references:_
     [[*Projectile][Key bindings]]
     [[*Counsel][counsel-projectile]]
**** Company
     Modular in-buffer completion framework.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config (add-hook 'after-init-hook #'global-company-mode))

  (use-package company-c-headers
    :ensure t
    :config
    (add-to-list 'company-backends 'company-c-headers))
#+END_SRC
**** Editorconfig
     Project based coding style rules.
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :config (editorconfig-mode 1))
#+END_SRC
**** Slime
     The Superior Lisp Interaction Mode for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))
#+END_SRC
**** Semantic
     Semantic is a suite of Emacs libraries and utilities for parsing
     source code.
#+BEGIN_SRC emacs-lisp
  (use-package semantic
    :ensure t
    :config
    (global-semantic-idle-scheduler-mode 1)
    (global-semanticdb-minor-mode 1))
#+END_SRC
**** Yasnippet
     Snippets!
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

  ;; Basic general snippets
  (use-package yasnippet-snippets
    :ensure t
    :requires yasnippet
    :config
    (yas-reload-all))
#+END_SRC
**** Web development
     Web template editing mode for emacs.
#+BEGIN_SRC emacs-lisp
  ;;; Mode for HTML w/ template motors
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php\\'"   . web-mode)))

  ;; Emmet plugin for emacs
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'sgml-mode-hook #'emmet-mode)
    (add-hook 'css-mode-hook  #'emmet-mode))

#+END_SRC
**** Beancount
     Emacs interface to beancount program.
#+BEGIN_SRC emacs-lisp
  (require 'beancount)
  (add-to-list 'auto-mode-alist '("\\.dat\\'" . beancount-mode))
#+END_SRC
**** Paredit
     Closes parenthesis automatically.
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (add-hook 'text-mode-hook #'enable-paredit-mode)
    (add-hook 'clojure-mode-hook #'enable-paredit-mode)
    (add-hook 'c-mode-common-hook #'enable-paredit-mode)
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode))
#+END_SRC
**** Clojure
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t)
  (add-hook 'clojure-mode-hook #'cider-mode)
#+END_SRC
**** Hydra
     Organize keybinds by groups.
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t
    :hook (after-init . hydra-posframe-enable))
#+END_SRC
*** Aesthetic
**** Powerline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :config (powerline-default-theme))
#+END_SRC
**** Diminish
     Hide minor modes from the mode-line.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :config
    (add-hook 'after-init-hook
	      (lambda ()
		(diminish #'projectile-mode)
		(diminish #'ivy-mode)
		(diminish #'undo-tree-mode)
		(diminish #'org-src-mode)
		(diminish #'eldoc-mode)
		(diminish #'which-key-mode)
		(diminish #'editorconfig-mode)
		(diminish #'company-mode)
		(diminish #'beacon-mode)
		(diminish #'linum-relative-mode)
		(diminish #'auto-revert-mode)
		(diminish #'abbrev-mode)
		(diminish #'ggtags-mode)
		(diminish #'yas-minor-mode)
		(diminish #'git-gutter-mode))))
#+END_SRC
**** Beacon
     A light that follows your cursor around so you don't lose it!
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config (beacon-mode 1))
#+END_SRC
**** Themes
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure t)
  (use-package color-theme-sanityinc-tomorrow
    :ensure t)
#+END_SRC
**** Git Gutter Fringe
     Allows highlighting uncommitted changes.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :ensure t
    :config
    (setq git-gutter-fr:side #'right-fringe)
    (setq-default right-fringe-width 4)
    (global-git-gutter-mode))
#+END_SRC
**** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
**** Spaceline
     Cute modeline <3
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'info+)
    (require 'spaceline-config))

  (use-package spaceline-all-the-icons
    :ensure t
    :after (spaceline all-the-icons)
    :config
    (setq spaceline-all-the-icons-separator-type 'none)
    (spaceline-all-the-icons--setup-package-updates)
    (spaceline-all-the-icons-theme))
#+END_SRC
**** Posframe
#+BEGIN_SRC emacs-lisp
  (use-package ivy-posframe
    :ensure t
    :after (ivy)
    :disabled t
    :config
    (setq ivy-display-function #'ivy-posframe-display-at-window-center))

  (use-package hydra-posframe
    :load-path "lib/"
    :after (hydra))
#+END_SRC
*** VIM emulation
**** Evil-leader
     Leader key functionality.

     Author note: You should enable global-evil-leader-mode before you enable evil-mode,
     otherwise evil-leader won’t be enabled in initial buffers (*scratch*, *Messages*, …).
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :config (global-evil-leader-mode)
	    (evil-leader/set-leader ","))
#+END_SRC

**** Evil-mode
     A vim emulator layer.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init (setq evil-leader/no-prefix-mode-rx '("magit-.*-mode" "gnus-.*-mode"))
    :config (evil-mode t))
#+END_SRC

**** Linum-relative
     Show relative line numbers based on current line.
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :init (setq linum-relative-backend 'display-line-numbers-mode)
	  ;; If linum-relative-current-symbol is defined as a empty
	  ;; string, it will show the current real line number.
	  (setq linum-relative-current-symbol "")
    :config (add-hook 'prog-mode-hook
		      (lambda ()
			(linum-relative-mode 1))))
#+END_SRC
*** IVY related
    _references:_
    [[*Ivy][Swiper key bindings]]
**** Ivy
     Autocompletion mechanism
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :init (setq ivy-use-virtual-buffers t)
	  (setq enable-recursive-minibuffers t)
    :config (ivy-mode 1))
#+END_SRC
**** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :requires (ivy projectile)
    :config
    (counsel-projectile-mode))
#+END_SRC
*** ORG related
**** Pretty-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook
		      (lambda ()
			(org-bullets-mode t))))
#+END_SRC

    _references:_
    [[*Org-mode][Key bindings]]
**** Ox-twbs
     Export org-mode docs as HTML compatible with Twitter Bootstrap.
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+END_SRC
*** Mail
**** Neomutt
     Mode to edit neomutt files.
#+BEGIN_SRC emacs-lisp
  (autoload 'muttrc-mode "muttrc-mode.el"
      "Major mode to edit muttrc files" t)
  (add-to-list 'auto-mode-alist '("\\.mtt\\'" . muttrc-mode))
  (add-to-list 'auto-mode-alist '("muttrc\\'" . muttrc-mode))
#+END_SRC
**** Notmuch
#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :ensure t)
#+END_SRC
** Key bindings
*** General
**** Kill the current buffer.
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "q" #'kill-this-buffer)
#+END_SRC
**** Zoom adjustment
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "z" #'text-scale-adjust)
#+END_SRC
**** Emacs directory related
     Reload the init file.
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "cr"
    (lambda ()
      (interactive)
      (load-file (concat user-emacs-directory "init.el"))))
#+END_SRC

     Open conf.org for modifications.
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "ce"
    (lambda ()
      (interactive)
      (if (find-buffer-visiting "conf.org")
	  (switch-to-buffer "conf.org")
	(find-file (concat user-emacs-directory "conf/conf.org")))))
#+END_SRC
**** Term
#+BEGIN_SRC emacs-lisp
  ;; basic shell
  (evil-leader/set-key "s" #'shell)

  ;; open external shell
  (evil-leader/set-key "S"
    (lambda ()
      (interactive)
      (call-process "alacritty")))
#+END_SRC
**** Windows
#+BEGIN_SRC emacs-lisp
  ;; after org since org uses M-h and my keybind
  ;; was being replaced.
  (with-eval-after-load "org"
    (global-set-key (kbd "M-h") #'windmove-left)
    (global-set-key (kbd "M-j") #'windmove-down)
    (global-set-key (kbd "M-k") #'windmove-up)
    (global-set-key (kbd "M-l") #'windmove-right))
#+END_SRC
**** Open dump note
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "d" #'my-open-dump-file)
#+END_SRC
**** Hydra Menus
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key-for-mode 'c-mode "t" #'hydra-c-tags-menu/body)
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "gs" #'magit-status)
#+END_SRC
*** Ivy
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-s" 'swiper)
  (evil-leader/set-key "bs" #'ivy-switch-buffer)
#+END_SRC
*** Org-mode
    Generate and insert links
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key-for-mode 'org-mode "ols" #'org-store-link)
  (evil-leader/set-key-for-mode 'org-mode "oli" #'org-insert-link)
#+END_SRC
*** Tomatinho
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f12>") #'tomatinho)
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "ps" #'counsel-projectile-switch-project)
  (evil-leader/set-key "pc" #'projectile-compile-project)
#+END_SRC
